

function parseVietnameseDate(dateString) {
  const currentDate = new Date();
  const defaultDay = String(currentDate.getDate()).padStart(2, "0");
  const defaultMonth = String(currentDate.getMonth() + 1).padStart(2, "0");
  const defaultYear = String(currentDate.getFullYear());

  if (typeof dateString !== "string") {
    console.error("‚ùå L·ªói: dateString kh√¥ng ph·∫£i l√† chu·ªói h·ª£p l·ªá", dateString);
    return `${defaultYear}-${defaultMonth}-${defaultDay}`;
  }

  const months = {
    "th√°ng 1": "01", "th√°ng 2": "02", "th√°ng 3": "03", "th√°ng 4": "04",
    "th√°ng 5": "05", "th√°ng 6": "06", "th√°ng 7": "07", "th√°ng 8": "08",
    "th√°ng 9": "09", "th√°ng 10": "10", "th√°ng 11": "11", "th√°ng 12": "12"
  };

  // T√¨m c√°c ph·∫ßn Ng√†y, Th√°ng, NƒÉm
  const match = dateString.match(/(?:Ng√†y\s*(\d{1,2}))?\s*(?:th√°ng\s*(\d{1,2}))?\s*(?:nƒÉm\s*(\d{4}))?/i);

  if (!match) {
    console.error("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ƒë·ªãnh d·∫°ng ng√†y th√°ng h·ª£p l·ªá trong", dateString);
    return `${defaultYear}-${defaultMonth}-${defaultDay}`;
  }

  let [, day, month, year] = match;

  day = day ? day.padStart(2, "0") : defaultDay;
  month = month ? months[`th√°ng ${month}`] : defaultMonth;
  year = year || defaultYear;

  return `${year}-${month}-${day}`;
}


function parseVietnameseNumber(value) {
  if (typeof value === "number") {
    return value;
  }
  if (typeof value === "string") {
    return parseInt(value.replace(/\./g, ""), 10) || 0;
  }
  console.error("‚ùå L·ªói: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", value);
  return 0;
}


const generateReportForDate = async (date) => {
    console.log(`\uD83D\uDCE5 ƒêang t·ªïng h·ª£p h√≥a ƒë∆°n cho ng√†y ${date}`);
    const sql_connection = await mysql.createConnection(dbConfig);
  
    try {
      const [orders] = await sql_connection.execute(
        `SELECT o.id, c.name AS customer_name, c.address, o.order_date, 
                o.totalAmount AS total_amount
         FROM Orders o 
         JOIN Customers c ON o.customer_id = c.id 
         WHERE o.order_date = ?`,
        [date]
      );
  
      if (orders.length === 0) {
        await sql_connection.end();
        return null;
      }
  
      const workbook = XLSX.utils.book_new();
  
      // T·∫°o sheet t·ªïng h·ª£p
      const summarySheetData = [["ID H√≥a ƒê∆°n", "T√™n Kh√°ch H√†ng", "ƒê·ªãa Ch·ªâ", "Ng√†y ƒê·∫∑t H√†ng", "T·ªïng Ti·ªÅn"]];
      for (const order of orders) {
        summarySheetData.push([order.id, order.customer_name, order.address, order.order_date, order.total_amount]);
      }
      const summarySheet = XLSX.utils.aoa_to_sheet(summarySheetData);
      XLSX.utils.book_append_sheet(workbook, summarySheet, "T·ªïng h·ª£p");
  
      // Th√™m t·ª´ng h√≥a ƒë∆°n v√†o sheet ri√™ng
      for (const order of orders) {
        const sheetData = [["T√™n M·∫∑t H√†ng", "S·ªë L∆∞·ª£ng", "ƒê∆°n Gi√°", "Th√†nh Ti·ªÅn"]];
  
        const [items] = await sql_connection.execute(
          "SELECT item_name, quantity, unit_price, total_price FROM Order_Items WHERE order_id = ?",
          [order.id]
        );
  
        for (const item of items) {
          sheetData.push([item.item_name, item.quantity, item.unit_price, item.total_price]);
        }
  
        sheetData.push([]); // D√≤ng tr·ªëng
        sheetData.push(["T·ªïng ti·ªÅn", "", "", order.total_amount]);
  
        const sheet = XLSX.utils.aoa_to_sheet(sheetData);
        XLSX.utils.book_append_sheet(workbook, sheet, `H√≥a ƒë∆°n ${order.id}`);
      }
  
      const excelFilePath = `./report_${date}.xlsx`;
      XLSX.writeFile(workbook, excelFilePath);
  
      await sql_connection.end();
      return excelFilePath;
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o b√°o c√°o:", error);
      await sql_connection.end();
      return null;
    }
  };

  const generateDateKeyboard = () => {
    const today = new Date();
    let keyboard = { inline_keyboard: [] };
  
    for (let i = 0; i < 7; i++) {
      let date = new Date();
      date.setDate(today.getDate() - i);
      let formattedDate = date.toISOString().split("T")[0];
  
      keyboard.inline_keyboard.push([
        { text: formattedDate, callback_data: `date_${formattedDate}` },
      ]);
    }
  
    return keyboard;
  };
  

const generateReportForCustomer = async (customerName) => {
    console.log(`üì• ƒêang t·ªïng h·ª£p to√†n b·ªô h√≥a ƒë∆°n cho kh√°ch h√†ng: ${customerName}`);
    const sql_connection = await mysql.createConnection(dbConfig);
  
    try {
      const [orders] = await sql_connection.execute(
        `SELECT o.id, c.name AS customer_name, c.address, o.order_date, 
                SUM(oi.total_price) AS total_amount
         FROM Orders o 
         JOIN Customers c ON o.customer_id = c.id 
         JOIN Order_Items oi ON o.id = oi.order_id
         WHERE c.name = ?
         GROUP BY o.id, c.name, c.address, o.order_date`,
        [customerName]
      );
  
      if (orders.length === 0) {
        await sql_connection.end();
        return null;
      }
  
      const workbook = XLSX.utils.book_new();
  
      // T·∫°o sheet t·ªïng h·ª£p
      const summarySheetData = [["ID H√≥a ƒê∆°n", "T√™n Kh√°ch H√†ng", "ƒê·ªãa Ch·ªâ", "Ng√†y ƒê·∫∑t H√†ng", "T·ªïng Ti·ªÅn"]];
      for (const order of orders) {
        summarySheetData.push([order.id, order.customer_name, order.address, order.order_date, order.total_amount]);
      }
      const summarySheet = XLSX.utils.aoa_to_sheet(summarySheetData);
      XLSX.utils.book_append_sheet(workbook, summarySheet, "T·ªïng h·ª£p");
  
      // Th√™m t·ª´ng h√≥a ƒë∆°n v√†o sheet ri√™ng
      for (const order of orders) {
        const sheetData = [["T√™n M·∫∑t H√†ng", "S·ªë L∆∞·ª£ng", "ƒê∆°n Gi√°", "Th√†nh Ti·ªÅn"]];
  
        const [items] = await sql_connection.execute(
          "SELECT item_name, quantity, unit_price, total_price FROM Order_Items WHERE order_id = ?",
          [order.id]
        );
  
        for (const item of items) {
          sheetData.push([item.item_name, item.quantity, item.unit_price, item.total_price]);
        }
  
        sheetData.push([]); // D√≤ng tr·ªëng
        sheetData.push(["T·ªïng ti·ªÅn", "", "", order.total_amount]);
  
        const sheet = XLSX.utils.aoa_to_sheet(sheetData);
        XLSX.utils.book_append_sheet(workbook, sheet, `H√≥a ƒë∆°n ${order.id}`);
      }
  
      const excelFilePath = `./report_all_time_${customerName}.xlsx`;
      XLSX.writeFile(workbook, excelFilePath);
  
      await sql_connection.end();
      return excelFilePath;
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o b√°o c√°o:", error);
      await sql_connection.end();
      return null;
    }
  };
  
  
  const generateReportForDays = async (days) => {
    console.log(`üì• ƒêang t·ªïng h·ª£p h√≥a ƒë∆°n trong ${days} ng√†y g·∫ßn ƒë√¢y`);
    const sql_connection = await mysql.createConnection(dbConfig);
  
    try {
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days +1);
      const formattedStartDate = startDate.toISOString().split("T")[0];
  
      const [orders] = await sql_connection.execute(
        `SELECT o.id, c.name AS customer_name, c.address, o.order_date, 
                SUM(oi.total_price) AS total_amount
         FROM Orders o 
         JOIN Customers c ON o.customer_id = c.id 
         JOIN Order_Items oi ON o.id = oi.order_id
         WHERE o.order_date >= ?
         GROUP BY o.id, c.name, c.address, o.order_date`,
        [formattedStartDate]
      );
  
      if (orders.length === 0) {
        await sql_connection.end();
        return null;
      }
  
      const workbook = XLSX.utils.book_new();
  
      // T·∫°o sheet t·ªïng h·ª£p
      const summarySheetData = [["ID H√≥a ƒê∆°n", "T√™n Kh√°ch H√†ng", "ƒê·ªãa Ch·ªâ", "Ng√†y ƒê·∫∑t H√†ng", "T·ªïng Ti·ªÅn"]];
      for (const order of orders) {
        summarySheetData.push([order.id, order.customer_name, order.address, order.order_date, order.total_amount]);
      }
      const summarySheet = XLSX.utils.aoa_to_sheet(summarySheetData);
      XLSX.utils.book_append_sheet(workbook, summarySheet, "T·ªïng h·ª£p");
  
      // Th√™m t·ª´ng h√≥a ƒë∆°n v√†o sheet ri√™ng
      for (const order of orders) {
        const sheetData = [["T√™n M·∫∑t H√†ng", "S·ªë L∆∞·ª£ng", "ƒê∆°n Gi√°", "Th√†nh Ti·ªÅn"]];
  
        const [items] = await sql_connection.execute(
          "SELECT item_name, quantity, unit_price, total_price FROM Order_Items WHERE order_id = ?",
          [order.id]
        );
  
        for (const item of items) {
          sheetData.push([item.item_name, item.quantity, item.unit_price, item.total_price]);
        }
  
        sheetData.push([]); // D√≤ng tr·ªëng
        sheetData.push(["T·ªïng ti·ªÅn", "", "", order.total_amount]);
  
        const sheet = XLSX.utils.aoa_to_sheet(sheetData);
        XLSX.utils.book_append_sheet(workbook, sheet, `H√≥a ƒë∆°n ${order.id}`);
      }
  
      const excelFilePath = `./report_${days}_days.xlsx`;
      XLSX.writeFile(workbook, excelFilePath);
  
      await sql_connection.end();
      return excelFilePath;
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o b√°o c√°o:", error);
      await sql_connection.end();
      return null;
    }
  };