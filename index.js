const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const FormData = require("form-data");
const XLSX = require("xlsx");

TELEGRAM_BOT_DAT_TOKEN="7730662102:AAGqaftCXkjvX8QpDAJvtFpqvR59z6AfYJU"

AWS_RESULT_BUCKET=excel-results 


BOT_TOKEN = TELEGRAM_BOT_DAT_TOKEN
const bot = new TelegramBot(BOT_TOKEN, { polling: true });



// API URL nh·∫≠n file
const apiUrl = "http://222.255.250.26:8090/extract_bill_info/";

console.log(" bot dang chay")
bot.on("photo", async (msg) => {
  const chatId = msg.chat.id;
  console.log("üì• Nh·∫≠n ·∫£nh t·ª´ chatID:", chatId);

  try {
    // L·∫•y fileId c·ªßa ·∫£nh l·ªõn nh·∫•t
    const fileId = msg.photo[msg.photo.length - 1].file_id;
    const fileInfo = await bot.getFile(fileId);

    console.log("‚ÑπÔ∏è File Info:", fileInfo);
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.file_path}`;
    console.log("üåç File URL:", fileUrl);

    // T·∫°o ƒë∆∞·ªùng d·∫´n l∆∞u file t·∫°m th·ªùi
    const fileExtension = path.extname(fileInfo.file_path);
    const fileName = `photo_${chatId}_${Date.now()}${fileExtension}`;
    const filePath = path.join(__dirname, fileName);

    // T·∫£i ·∫£nh v·ªÅ m√°y
    const response = await axios({ url: fileUrl, responseType: "stream" });
    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);

    await new Promise((resolve, reject) => {
      writer.on("finish", resolve);
      writer.on("error", reject);
    });

    console.log("‚úÖ ·∫¢nh ƒë√£ t·∫£i v·ªÅ:", filePath);

    // Chu·∫©n b·ªã FormData
    const formData = new FormData();
    formData.append("file", fs.createReadStream(filePath));

    // G·ª≠i ·∫£nh l√™n API
    const apiResponse = await axios.post(apiUrl, formData, {
      headers: formData.getHeaders(),
    });

    console.log("üì§ Ph·∫£n h·ªìi t·ª´ API:", apiResponse.data);
    bot.sendMessage(chatId, `‚úÖ ·∫¢nh ƒë√£ g·ª≠i ƒëi th√†nh c√¥ng!`);

    // X√≥a file sau khi upload
    fs.unlinkSync(filePath);


    
    console.log("üìú API Response:", apiResponse.data);

    // 4Ô∏è‚É£ Chuy·ªÉn ph·∫£n h·ªìi JSON th√†nh Excel
    const jsonData = apiResponse.data;
    const workbook = XLSX.utils.book_new();

    // Sheet 1: Th√¥ng tin kh√°ch h√†ng
    const customerData = [
      ["T√™n kh√°ch h√†ng", jsonData["T√™n kh√°ch h√†ng"]],
      ["ƒê·ªãa ch·ªâ", jsonData["ƒê·ªãa ch·ªâ"]],
      ["Th·ªùi gian", jsonData["Th·ªùi gian"]],
    ];
    const sheet1 = XLSX.utils.aoa_to_sheet(customerData);
    XLSX.utils.book_append_sheet(workbook, sheet1, "Kh√°ch h√†ng");

    // Sheet 2: Danh s√°ch h√†ng h√≥a
    const headers = ["Th·ª© t·ª±", "T√™n m·∫∑t h√†ng", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√°", "Th√†nh ti·ªÅn"];
    const dataRows = jsonData["Th√¥ng tin"].map(item => [
      item["th·ª© t·ª±"], item["t√™n m·∫∑t h√†ng"], item["s·ªë l∆∞·ª£ng"], item["ƒë∆°n gi√°"], item["th√†nh ti·ªÅn"]
    ]);
    const sheet2 = XLSX.utils.aoa_to_sheet([headers, ...dataRows]);
    XLSX.utils.book_append_sheet(workbook, sheet2, "Danh s√°ch h√†ng h√≥a");

    // 5Ô∏è‚É£ L∆∞u file Excel
    const excelFilePath = `./data_${chatId}.xlsx`;
    XLSX.writeFile(workbook, excelFilePath);
    
    console.log(`‚úÖ File Excel ƒë√£ t·∫°o: ${excelFilePath}`);

    // 6Ô∏è‚É£ G·ª≠i file Excel l·∫°i cho nh√≥m chat
    await bot.sendDocument(chatId, excelFilePath, { caption: "‚úÖ File Excel ƒë√£ ƒë∆∞·ª£c t·∫°o!" });

    // X√≥a file Excel sau khi g·ª≠i
    fs.unlinkSync(excelFilePath);


  } catch (error) {
    console.error("‚ùå L·ªói:", error);
    bot.sendMessage(chatId, "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ·∫£nh.");
  }
});
